(in-microtheory SorryGameMt)

;;; card is SORRY-ONE /and/ agent has piece in start
;;; /and/ agent has no piece in pos 1 /and/ no opponent piece in pos 1

(preconditionForMethod
 (and
      (currCard Sorry-One)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (colorOfPiece ?piece2 ?color1)
      (different ?piece1 ?piece2)
      (piecePosition ?piece1 0)
      (uninferredSentence (piecePosition ?piece2 1))
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (uninferredSentence (piecePosition ?piece3 31))
<<<<<<< HEAD
	
      ;;; get next turn and new card
      ;;; TODO: fix swapTurn
      ;;;        right now, saves (whoseTurn (swapTurn ?next)) into KB
      ;;; (evaluate ?nextTurn (swapTurn ?next))
	  
	  ;;; modified 2/23: delete evaluate. because horn clauses can be triggered automatically in precondition part in planner, but not actionSequence part.
	  (swapTurn ?nextTurn)
    (evaluate ?newCard 
		  (RandomMemberFn 
			  (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))
=======
	  
  	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
	  		  (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards))))
      )
>>>>>>> 61bfaae39f587f317e5a2e2e89b329874752f0e6

 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update piece position
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 1)))
    (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 0)))
 
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-One)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; card is SORRY-ONE /and/ agent has piece in start
;;; /and/ agent has no piece in pos 1 /and/ THERE IS an opponent piece in pos 1
;;; 2/24: maybe we don't need to check "agent has no piece in pos 1"

(preconditionForMethod
 (and
      (currCard Sorry-One)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 0)
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (piecePosition ?piece3 31)
	
      ;;; get next turn and new card
      ;;; TODO: fix swapTurn
      ;;;        right now, saves (whoseTurn (swapTurn ?next)) into KB
      ;;; (evaluate ?nextTurn (swapTurn ?next))
	  
	  ;;; modified 2/23: delete evaluate. because horn clauses can be triggered automatically in precondition part in planner, but not actionSequence part.
	  (swapTurn ?nextTurn)
    (evaluate ?newCard 
		  (RandomMemberFn 
			  (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards)))))

 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    ;;; update piece position
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 1)))
    (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 0)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece3 0)))
    (doForget
    	(ist-Information SorryFactsMt (piecePosition ?piece3 31)))
 
    ;;; swap turns and pick new random card
    (doForget 
		  (ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		  (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		  (ist-Information SorryFactsMt (currCard Sorry-One)))
    (doRecord 
		  (ist-Information SorryFactsMt (currCard ?newCard)))))))

;;; card is SORRY-ONE and agent does not have piece in start
;;; agent chooses one piece to move forward 1
;;; agent has one piece one step away from home

;;; 2/24: Horn Clauses almostWin ??

;;; card is SORRY-ONE and agent does not have piece in start
;;; agent chooses one piece to move forward 1

;;; agent has one piece which is one step away from a piece of the opponent

(preconditionForMethod
 (and
      (currCard Sorry-One)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (piecePosition ?piece1 ?position1)
      (colorOfPiece ?piece1 ?color1)
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (piecePosition ?piece3 ?position2)
      (evaluate 30 (AbsoluteValueFn (DifferenceFn (PlusFn ?position1 1) ?position2)))
      (evaluate ?a (PlusFn ?position1 1)))

 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
    (doForget 
      (ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doForget 
      (ist-Information SorryFactsMt (piecePosition ?piece3 ?position2)))
    (doRecord
      (ist-Information SorryFactsMt (piecePosition ?piece1 ?a)))
    (doRecord 
      (ist-Information SorryFactsMt (piecePosition ?piece3 0)))))))

;;; the piece has no piece and no opponent piece one step in front of it

(preconditionForMethod
 (and
      (currCard Sorry-One)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (piecePosition ?piece1 ?position1)
      (colorOfPiece ?piece1 ?color1)
      (colorOfPiece ?piece2 ?color1)
      (different ?piece1 ?piece2)
      (evaluate ?nextPosition (PlusFn ?position1 1))
      (uninferredSentence  (piecePosition ?piece2 ?nextPosition))
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (piecePosition ?piece3 ?position2)
      (evaluate ?b (not (evaluate 30 (AbsoluteValueFn (DifferenceFn ?nextPosition ?position2))))))
      
      ;;;(not (numericallyEquals 30 (AbsoluteValueFn (PlusFn (PlusFn ?position1 1) (MinusFn ?position2)))))
      
 (methodForAction
  (moveSorryPiece)
  (actionSequence
   (TheList
   (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?position1)))
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 ?nextPosition)))))))



;;; SORRY-SORRY
;;; if there is a piece in start and an opponent piece to swap with
(preconditionForMethod
  (and
      (currCard Sorry-Sorry)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 0)
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (piecePosition ?piece2 ?piece2pos)
      (greaterThan ?piece2pos 0) ;;; piece not in start
      (lessThan ?piece2pos 61) ;;; piece not in safe zone

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
	  		  (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards))))
      )
    (methodForAction
      (moveSorryPiece)
      
      (actionSequence
        (TheList
        
          (doRecord
            (ist-Information SorryFactsMt (piecePosition ?piece1 ?piece2pos)))
          (doForget
            (ist-Information SorryFactsMt (piecePosition ?piece1 0)))
          (doRecord
            (ist-Information SorryFactsMt (piecePosition ?piece2 0)))
          (doForget
            (ist-Information SorryFactsMt (piecePosition ?piece2 ?piece2pos)))
            
          ;;; swap turns and pick new random card
          (doForget 
            (ist-Information SorryFactsMt (whoseTurn ?agent1)))
          (doRecord 
            (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
          (doForget 
            (ist-Information SorryFactsMt (currCard Sorry-One)))
          (doRecord 
            (ist-Information SorryFactsMt (currCard ?newCard)))
        ))))

;;; if there is no piece in start, just swap turns and pick new card
(preconditionForMethod
  (and
      (currCard Sorry-Sorry)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (uninferredSentence (piecePosition ?piece1 0))

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
	  		  (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards))))
      )
  (methodForAction
    (moveSorryPiece)
    
    (actionSequence
      (TheList
        
        ;;; swap turns and pick new random card
          (doForget 
            (ist-Information SorryFactsMt (whoseTurn ?agent1)))
          (doRecord 
            (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
          (doForget 
            (ist-Information SorryFactsMt (currCard Sorry-One)))
          (doRecord 
            (ist-Information SorryFactsMt (currCard ?newCard)))
            ))))

;;; if piece in start, but no opponent piece to swap with
;;; just swap turn and pick new card
(preconditionForMethod
  (and
      (currCard Sorry-Sorry)
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (piecePosition ?piece1 0)
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (piecePosition ?piece2 ?piece2pos)

      ;;; all opponent pieces either in start or safe zone
      (not (greaterThan ?piece2pos 0))
      (not (lessThan ?piece2pos 61)))

      (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
	  		  (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards))))
      )
    (methodForAction
      (moveSorryPiece)
      
      (actionSequence
        (TheList

          ;;; swap turns and pick new random card
          (doForget 
            (ist-Information SorryFactsMt (whoseTurn ?agent1)))
          (doRecord 
            (ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
          (doForget 
            (ist-Information SorryFactsMt (currCard Sorry-One)))
          (doRecord 
            (ist-Information SorryFactsMt (currCard ?newCard)))
        ))))


;;; SORRY-FOUR

;;; SORRY-TWO
;;; if piece in start and no pieces in space outside, move piece from start
(preconditionForMethod
 (and
      (currCard Sorry-Two)  
      (whoseTurn ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (colorOfPiece ?piece2 ?color1)
      (different ?piece1 ?piece2)
      (piecePosition ?piece1 0)
      (uninferredSentence (piecePosition ?piece2 1))
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (uninferredSentence (piecePosition ?piece3 31))
	  
  	  (swapTurn ?nextTurn)
      (evaluate ?newCard 
		    (RandomMemberFn 
	  		  (TheClosedRetrievalSetOf ?card (isa ?card Sorry-Cards))))
      )

 (methodForAction
  (moveSorryPiece)

  (actionSequence
   (TheList

    ;;; update piece position
    (doRecord 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 1)))
    (doForget 
    	(ist-Information SorryFactsMt (piecePosition ?piece1 0)))
 
    ;;; swap turns and pick new random card
    (doForget 
		(ist-Information SorryFactsMt (whoseTurn ?agent1)))
    (doRecord 
		(ist-Information SorryFactsMt (whoseTurn ?nextTurn)))
    (doForget 
		(ist-Information SorryFactsMt (currCard Sorry-Two)))
    (doRecord 
		(ist-Information SorryFactsMt (currCard ?newCard)))
              ))))

