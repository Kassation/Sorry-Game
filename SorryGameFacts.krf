(in-microtheory SorryFactsMt)
(genlMt SorryGameMt SorryFactsMt)

(isa BoardPieces SecondOrderCollection)
(isa SorryAgents FirstOrderCollection)
(isa SorryColors FirstOrderCollection)

;;; define pieces
;;;
;;; red
;;; 2/23: still think we need to define "RedPieces" first?
(isa RedPieces FirstOrderCollection)
(isa RedPieces BoardPieces)
(isa Red1 RedPieces)
(isa Red2 RedPieces)
(isa Red3 RedPieces)
(isa Red4 RedPieces)
(isa red SorryColors)
(colorOfPiece Red1 red)
(colorOfPiece Red2 red)
(colorOfPiece Red3 red)
(colorOfPiece Red4 red)
(isa RedAgent SorryAgents)
(colorOfAgent RedAgent red)

;;; USE: check if landing on space that has piece of same or different color
;;;   if same ==> cannot make move
;;;   if different ==> knock other piece back to start


;;; yellow
;;; 2/23: still think we need to define "YellowPieces" first?
(isa YellowPieces FirstOrderCollection)
(isa YellowPieces BoardPieces)
(isa Yellow1 YellowPieces)
(isa Yellow2 YellowPieces)
(isa Yellow3 YellowPieces)
(isa Yellow4 YellowPieces)
(isa yellow SorryColors)
(colorOfPiece Yellow1 yellow)
(colorOfPiece Yellow2 yellow)
(colorOfPiece Yellow3 yellow)
(colorOfPiece Yellow4 yellow)
(isa YellowAgent SorryAgents)
(colorOfAgent YellowAgent yellow)



;;; cards
;;; added 2/23 below:
(isa Sorry-Cards FirstOrderCollection)
(isa Sorry-Cards-Pickable FirstOrderCollection)
(genls Sorry-Cards PlayingCard)
(genls Sorry-Cards-Pickable PlayingCard)
;;; ended adding below...

(isa Sorry-One Sorry-Cards)
(isa Sorry-One Sorry-Cards-Pickable)

(isa Sorry-Two Sorry-Cards)
(isa Sorry-Two Sorry-Cards-Pickable)

(isa Sorry-Three Sorry-Cards)
(isa Sorry-Three Sorry-Cards-Pickable)

(isa Sorry-Four Sorry-Cards)
(isa Sorry-Four Sorry-Cards-Pickable)

(isa Sorry-Five Sorry-Cards)
(isa Sorry-Five Sorry-Cards-Pickable)

(isa Sorry-Seven Sorry-Cards)
(isa Sorry-Seven Sorry-Cards-Pickable)
;;; subset:
(isa Sorry-Seven-Six Sorry-Cards)
(isa Sorry-Seven-Five Sorry-Cards)
(isa Sorry-Seven-Four Sorry-Cards)
(isa Sorry-Seven-Three Sorry-Cards)
(isa Sorry-Seven-Two Sorry-Cards)
(isa Sorry-Seven-One Sorry-Cards)

(isa Sorry-Eight Sorry-Cards)
(isa Sorry-Eight Sorry-Cards-Pickable)

(isa Sorry-Ten Sorry-Cards)
(isa Sorry-Ten Sorry-Cards-Pickable)

(isa Sorry-Eleven Sorry-Cards)
(isa Sorry-Eleven Sorry-Cards-Pickable)

(isa Sorry-Twelve Sorry-Cards)
(isa Sorry-Twelve Sorry-Cards-Pickable)

(isa Sorry-Sorry Sorry-Cards)
(isa Sorry-Sorry Sorry-Cards-Pickable)

;;; (RandomMemberFn (TheSet Sorry-Cards-Pickable))
;;; returns a random card
;;; game start off with random card in KB


;;; swap turns:
(<== (swapTurn ?next)
      (whoseTurn YellowAgent)
      (unifies ?next RedAgent))

(<== (swapTurn ?next)
      (whoseTurn RedAgent)
      (unifies ?next YellowAgent))


;;; check if there is a piece at the destination
(<== (noSameColorAhead ?piece1 ?step)
      (colorOfPiece ?piece1 ?color1)
      (colorOfPiece ?piece2 ?color1)
      (colorOfPiece ?piece3 ?color1)
      (colorOfPiece ?piece4 ?color1)
      (different ?piece4 ?piece3 ?piece2 ?piece1)
      (piecePosition ?piece1 ?position)
      (evaluate ?destination (PlusFn ?position ?step))
      (uninferredSentence (piecePosition ?piece2 ?destination))
      (uninferredSentence (piecePosition ?piece3 ?destination))  
      (uninferredSentence (piecePosition ?piece4 ?destination))        
      )

(<== (noOppoAhead ?piece ?step)
      (piecePosition ?piece ?position)
      (evaluate ?destination (PlusFn ?position ?step))
      (greaterThan ?destination 60))

(<== (noOppoAhead ?piece ?step)
      (colorOfPiece ?piece ?color1)
      (colorOfPiece ?piece1 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (colorOfPiece ?piece4 ?color2)
      (piecePosition ?piece1 ?position1)
      (piecePosition ?piece2 ?position2)
      (piecePosition ?piece3 ?position3)
      (piecePosition ?piece4 ?position4)
      (different ?piece1 ?piece2 ?piece3 ?piece4)
      (piecePosition ?piece ?position)
      (evaluate ?destination (PlusFn ?position ?step))
      (evaluate ?distance1 (AbsoluteValueFn (DifferenceFn 30 (AbsoluteValueFn (DifferenceFn ?destination ?position1)))))
      (greaterThan ?distance1 0)
      (evaluate ?distance2 (AbsoluteValueFn (DifferenceFn 30 (AbsoluteValueFn (DifferenceFn ?destination ?position2)))))
      (greaterThan ?distance2 0)
      (evaluate ?distance3 (AbsoluteValueFn (DifferenceFn 30 (AbsoluteValueFn (DifferenceFn ?destination ?position3)))))
      (greaterThan ?distance3 0)
      (evaluate ?distance4 (AbsoluteValueFn (DifferenceFn 30 (AbsoluteValueFn (DifferenceFn ?destination ?position4)))))
      (greaterThan ?distance4 0))



;;; When a piece is about to get HOME, check if the agent is going to win the game
(<== (notWinner ?agent1 ?piece1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (colorOfPiece ?piece2 ?color1)
      (uninferredSentence (piecePosition ?piece2 66))
      (different ?piece1 ?piece2))

(<== (winner ?agent1 ?piece1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (colorOfPiece ?piece2 ?color1)
      (colorOfPiece ?piece3 ?color1)
      (colorOfPiece ?piece4 ?color1)
      (piecePosition ?piece2 66)
      (piecePosition ?piece3 66)
      (piecePosition ?piece4 66)
      (different ?piece1 ?piece2 ?piece3 ?piece4))


;;; To check if the agent's pieces all at the start
;;; For Rule 1c
(<== (allAtStart ?agent1)
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (colorOfPiece ?piece2 ?color1)
      (colorOfPiece ?piece3 ?color1)
      (colorOfPiece ?piece4 ?color1)
      (different ?piece1 ?piece2 ?piece3 ?piece4)
      (piecePosition ?piece1 0)
      (piecePosition ?piece2 0)
      (piecePosition ?piece3 0)
      (piecePosition ?piece4 0))


;;; For Rule 5 (can be used with Rule 1c)
(<== (cannotMove ?piece ?step)
      (piecePosition ?piece 0))

(<== (cannotMove ?piece ?step)
      (piecePosition ?piece ?position)
      (evaluate ?nextPosition (PlusFn ?position ?step))
      (lessThan 66 ?nextPosition))

(<== (allCannotMove ?agent1 ?step) 
      (colorOfAgent ?agent1 ?color1)
      (colorOfPiece ?piece1 ?color1)
      (colorOfPiece ?piece2 ?color1)
      (colorOfPiece ?piece3 ?color1)
      (colorOfPiece ?piece4 ?color1)
      (different ?piece1 ?piece2 ?piece3 ?piece4)
      (cannotMove ?piece1 ?step)
      (cannotMove ?piece2 ?step)
      (cannotMove ?piece3 ?step)
      (cannotMove ?piece4 ?step)
      )

;;; find an opponent piece that is close to home to switch 
(<== (findOppoSwitch ?piece1 ?step ?piece2 ?nextPosition1 ?nextPosition2)
      (colorOfPiece ?piece1 ?color1)
      (colorOfPiece ?piece2 ?color2)
      (different ?color1 ?color2)
      (swapExists ?piece1 ?step ?piece2)
      (piecePosition ?piece1 ?position1)
      (piecePosition ?piece2 ?position2)
      (getOppoPos ?position1 ?nextPosition2)
      (getOppoPos ?position2 ?nextPosition1)
      )
      

;;; find no opponent to switch
(<== (findNoOppoSwitch ?piece ?step)
      (piecePosition ?piece ?position)
      (evaluate ?destination (PlusFn ?position ?step))
      (greaterThan ?destination 60))


(<== (findNoOppoSwitch ?piece ?step)
      (colorOfPiece ?piece ?color1)
      (colorOfAgent ?agent2 ?color2)
      (different ?color1 ?color2)
      (allAtStart ?agent2)
      )

(<== (findNoOppoSwitch ?piece ?step)
      (colorOfPiece ?piece ?color1)
      (colorOfPiece ?piece1 ?color2)
      (different ?color1 ?color2)
      (colorOfPiece ?piece2 ?color2)
      (colorOfPiece ?piece3 ?color2)
      (colorOfPiece ?piece4 ?color2)
      (different ?piece1 ?piece2 ?piece3 ?piece4)
      (swapNotExists ?piece ?step ?piece1)
      (swapNotExists ?piece ?step ?piece2)
      (swapNotExists ?piece ?step ?piece3)
      (swapNotExists ?piece ?step ?piece4))


(<== (swapExists ?piece1 ?step ?piece2) ;;; piece1 is your piece, piece2 is opponent piece
      (piecePosition ?piece1 ?pos1)
      (evaluate ?destination (PlusFn ?pos1 ?step))
      (piecePosition ?piece2 ?pos2)
      (lessThan ?pos2 61)
      (evaluate ?pos1Home (DifferenceFn 66 ?destination))
      (getOppoPos ?pos2 ?pos2Oppo)
      (evaluate ?pos2Home (DifferenceFn 66 ?pos2Oppo))
      (lessThanOrEqualTo ?pos2Home ?pos1Home)
)


(<== (swapNotExists ?piece1 ?step ?piece2) ;;; piece1 is your piece, piece2 is opponent piece
      (piecePosition ?piece1 ?pos1)
      (evaluate ?destination (PlusFn ?pos1 ?step))
      (piecePosition ?piece2 ?pos2)
      (lessThan ?pos2 61)
      (evaluate ?pos1Home (DifferenceFn 66 ?destination))
      (getOppoPos ?pos2 ?pos2Oppo)
      (evaluate ?pos2Home (DifferenceFn 66 ?pos2Oppo))
      (greaterThan ?pos2Home ?pos1Home)
)

(<== (getOppoPos ?myPos ?oppoPos)
      (greaterThan ?myPos 30)
      (evaluate ?a (DifferenceFn ?myPos 30))
      (unifies ?oppoPos ?a)
)

(<== (getOppoPos ?myPos ?oppoPos)
      (lessThan ?myPos 31)
      (evaluate ?a (PlusFn ?myPos 30))
      (unifies ?oppoPos ?a)
)

;;; cathy's horn clauses part
;;; used in card 7 when arrives at home with extra steps, then check whether this extra steps can be used or not.
;;; 1) not same color ahead (without arriving home)
(<== (checkisValidRemainingMove ?piece1 ?piece2 ?remainingSteps)
	 (colorOfPiece ?piece1 ?color)
	 (colorOfPiece ?piece2 ?color)
	 (colorOfPiece ?piece3 ?color)
	 (different ?piece1 ?piece2 ?piece3)
	 (piecePosition ?piece2 ?pos2)
	 (evaluate ?newPos (PlusFn ?pos2 ?remainingSteps))
	 (lessThan ?newPos 66)
	 (uninferredSentence (piecePosition ?piece3 ?newPos)))

;;; 2) with arriving home
(<== (checkisValidRemainingMove ?piece1 ?piece2 ?remainingSteps)
	 (colorOfPiece ?piece1 ?color)
	 (colorOfPiece ?piece2 ?color)
	 (different ?piece1 ?piece2)
	 (piecePosition ?piece2 ?pos2)
	 (evaluate ?newPos (PlusFn ?pos2 ?remainingSteps))
	 (equals ?newPos 66))

;;; cathy's horn clauses part
;;; For Rule 7 (use the remaining steps to recursively select the card)
(<== (chooseCardWithSteps ?card ?steps)
	 (equals ?steps 1)
	 (unifies ?card Sorry-Seven-One))

(<== (chooseCardWithSteps ?card ?steps)
	 (equals ?steps 2)
	 (unifies ?card Sorry-Seven-Two))

(<== (chooseCardWithSteps ?card ?steps)
	 (equals ?steps 3)
	 (unifies ?card Sorry-Seven-Three))

(<== (chooseCardWithSteps ?card ?steps)
	 (equals ?steps 4)
	 (unifies ?card Sorry-Seven-Four))

(<== (chooseCardWithSteps ?card ?steps)
	 (equals ?steps 5)
	 (unifies ?card Sorry-Seven-Five))

(<== (chooseCardWithSteps ?card ?steps)
	 (equals ?steps 6)
	 (unifies ?card Sorry-Seven-Six))